#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <Servo.h>

// WiFi credentials
#define WIFI_SSID "hhh"
#define WIFI_PASS "hhhhhhhh"
#define API_KEY "BGX2dTRJ5Jn0JZEOU7luWE9Mh82zNcdKFWKGF3DFRqBTz6SVgs21IT8TUTRAXvFHud2X4bNSWi0NDmFKYgRUgsdGZl3eGFnQpeKC1oPn76Uw2dO7xPk8VyXQqCniiyi0"

// Ultrasonic sensor pins
#define trigPin1 5  // D6 OUT
#define echoPin1 16 // D7 OUT

#define trigPin2 12 // D1 IN
#define echoPin2 13 // D0 IN

// Servo motor pin
#define SERVO_PIN 14  // D5

// Servo instance
Servo myservo;
WiFiClient wifiClient;

// Function to measure distance using an ultrasonic sensor
float measureDistance(int trigPin, int echoPin) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    long duration = pulseIn(echoPin, HIGH);  // Measure echo time
    float distance = (duration * 0.034) / 2; // Convert to cm
    return distance;
}

// Function to send data to the backend
void send_sensor_data(float distance1, float distance2) {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        String url = "http://192.168.1.100/sensor-data";  // Replace with backend IP

        // JSON payload
        String post_data = "{\"distance1\":" + String(distance1, 2) +
                           ", \"distance2\":" + String(distance2, 2) +
                           ", \"apiKey\":\"" + API_KEY + "\"}";

        http.begin(wifiClient, url);  // Pass WiFiClient instance and URL
        http.addHeader("Content-Type", "application/json");

        int httpResponseCode = http.POST(post_data);

        if (httpResponseCode > 0) {
            Serial.printf("HTTP Response code: %d\n", httpResponseCode);
            if (httpResponseCode == 200) {
                Serial.println("Data sent successfully");
            }
        } else {
            Serial.printf("Error sending data: %s\n", http.errorToString(httpResponseCode).c_str());
        }
        http.end();
    } else {
        Serial.println("WiFi not connected");
    }
}

void setup() {
    Serial.begin(115200);  // Start serial communication

    // Initialize ultrasonic sensor pins
    pinMode(trigPin1, OUTPUT);
    pinMode(echoPin1, INPUT);
    pinMode(trigPin2, OUTPUT);
    pinMode(echoPin2, INPUT);

    // Attach the servo motor
    myservo.attach(SERVO_PIN);

    // Connect to WiFi
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    Serial.println("Connecting to WiFi...");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi!");
}

void loop() {
    // Measure distances
    float distance1 = measureDistance(trigPin1, echoPin1);
    float distance2 = measureDistance(trigPin2, echoPin2);

    // Print distances to the serial monitor
    Serial.printf("Distance 1: %.2f cm, Distance 2: %.2f cm\n", distance1, distance2);

    // Control servo motor based on distance1
    if (distance1 < 20) {
        myservo.write(90);  // Rotate to 90 degrees
        Serial.println("Motor Status: Open");
    } else {
        myservo.write(0);   // Rotate to 0 degrees
        Serial.println("Motor Status: Closed");
    }

    // Check InSensor status
     if (distance2 <= 10) {
        Serial.println("InSensor: FULL");
    } 
      else if (distance2 > 10 && distance2 <= 15) {
        Serial.println("InSensor: HALF");
    } 
      else if (distance2 > 15 && distance2 <= 18){
        Serial.println("InSensor:little bit ");
    }
      else if (distance2 = 19) {
        Serial.println("InSensor: EMPTY");
    }

    // Send data to backend
    send_sensor_data(distance1, distance2);

    delay(5000);  // Wait 5 seconds before the next reading
}
