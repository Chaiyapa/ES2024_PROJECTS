#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <Servo.h>

// WiFi credentials
#define WIFI_SSID "hhh"
#define WIFI_PASS "hhhhhhhh"
#define API_KEY "BGX2dTRJ5Jn0JZEOU7luWE9Mh82zNcdKFWKGF3DFRqBTz6SVgs21IT8TUTRAXvFHud2X4bNSWi0NDmFKYgRUgsdGZl3eGFnQpeKC1oPn76Uw2dO7xPk8VyXQqCniiyi0"

// Ultrasonic sensor pins
#define trigPin1 5  // D6
#define echoPin1 16 // D7

#define trigPin2 12 // D1
#define echoPin2 13 // D0

// Servo motor pin
#define SERVO_PIN 14  // D5

// Servo instance
Servo myservo;
WiFiClient wifiClient;

float OutSensor = 0.0;
float InSensor = 0.0;

// Function to measure distance using an ultrasonic sensor
float measureDistance(int trigPin, int echoPin) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    long duration = pulseIn(echoPin, HIGH, 30000);  // Timeout in 30ms
    return (duration > 0) ? (duration * 0.034) / 2 : -1; // Return -1 if timeout
}

// Function to send data to the backend
void send_sensor_data(float distance1, float distance2) {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        String url = "http://192.168.137.111:3000/sensor-data";

        String post_data = "{\"distance1\":" + String(distance1, 2) +
                           ", \"distance2\":" + String(distance2, 2) +
                           ", \"apiKey\":\"" + API_KEY + "\"}";

        http.begin(wifiClient, url);
        http.addHeader("Content-Type", "application/json");

        int httpResponseCode = http.POST(post_data);
        if (httpResponseCode > 0) {
            Serial.printf("HTTP Response code: %d\n", httpResponseCode);
        } else {
            Serial.printf("Error sending data: %s\n", http.errorToString(httpResponseCode).c_str());
        }
        http.end();
    } else {
        Serial.println("WiFi not connected");
    }
}

void setup() {
    Serial.begin(115200);  // Initialize serial communication

    // Initialize ultrasonic sensor pins
    pinMode(trigPin1, OUTPUT);
    pinMode(echoPin1, INPUT);
    pinMode(trigPin2, OUTPUT);
    pinMode(echoPin2, INPUT);

    // Attach the servo motor
    myservo.attach(SERVO_PIN);

    // Connect to WiFi
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    Serial.println("Connecting to WiFi...");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi!");
}

void loop() {
    // Measure distances from both sensors
    OutSensor = measureDistance(trigPin1, echoPin1);
    InSensor = measureDistance(trigPin2, echoPin2);

    // Display sensor values
    Serial.printf("OutSensor: %.2f cm, InSensor: %.2f cm\n", OutSensor, InSensor);

    // Control the servo motor based on OutSensor
    if (OutSensor > 30) {
        myservo.write(95);  // Open to 95 degrees
        Serial.println("Motor Status: Open");
    } else if (OutSensor <= 30 && OutSensor > 0) {
        myservo.write(0);  // Close to 0 degrees
        Serial.println("Motor Status: Closed");
    }

    // Display InSensor status
    if (InSensor <= 10) {
        Serial.println("InSensor: FULL");
    } else if (InSensor > 10 && InSensor <= 15) {
        Serial.println("InSensor: NEARLY FULL");
    } else if (InSensor > 15 && InSensor <= 18) {
        Serial.println("InSensor: A little bit");
    } else if (InSensor == 19) {
        Serial.println("InSensor: EMPTY");
    }

    // Send sensor data to backend
    send_sensor_data(OutSensor, InSensor);

    delay(1000);  // Delay 1 second before next loop
}
