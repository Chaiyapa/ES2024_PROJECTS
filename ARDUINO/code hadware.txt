#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <Servo.h>

// WiFi credentials
#define WIFI_SSID "hhh"
#define WIFI_PASS "hhhhhhhh"
#define API_KEY "BGX2dTRJ5Jn0JZEOU7luWE9Mh82zNcdKFWKGF3DFRqBTz6SVgs21IT8TUTRAXvFHud2X4bNSWi0NDmFKYgRUgsdGZl3eGFnQpeKC1oPn76Uw2dO7xPk8VyXQqCniiyi0"

// Ultrasonic sensor pins
#define TRIG_PIN_1 5   // D6
#define ECHO_PIN_1 16  // D7
#define TRIG_PIN_2 12  // D1
#define ECHO_PIN_2 13  // D0

// Servo motor pin
#define SERVO_PIN 14   // D5

// Servo instance
Servo myservo;
WiFiClient wifiClient;
HTTPClient http;

unsigned long lastSendTime = 0;  // Timestamp for the last data sent
const unsigned long SEND_INTERVAL = 5000;  // 5-second interval

float previousDistance1 = -1;  // Store previous distances to detect changes
float previousDistance2 = -1;

// Function to measure distance using an ultrasonic sensor
float measureDistance(int trigPin, int echoPin) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    long duration = pulseIn(echoPin, HIGH, 30000);  // Timeout after 30ms
    if (duration == 0) return -1;  // No echo received, return invalid distance
    return (duration * 0.034) / 2; // Convert to cm
}

// Function to send data to the backend
void sendSensorData(float distance1, float distance2) {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi not connected");
        return;
    }

    String url = "http://192.168.137.111:3000/sensor-data";
    String postData = "{\"distance1\":" + String(distance1, 2) +
                      ", \"distance2\":" + String(distance2, 2) +
                      ", \"apiKey\":\"" + API_KEY + "\"}";

    http.begin(wifiClient, url);
    http.addHeader("Content-Type", "application/json");
    int httpResponseCode = http.POST(postData);

    if (httpResponseCode > 0) {
        Serial.printf("HTTP Response code: %d\n", httpResponseCode);
    } else {
        Serial.printf("Error sending data: %s\n", http.errorToString(httpResponseCode).c_str());
    }
    http.end();
}

void setup() {
    Serial.begin(115200);

    // Initialize pins
    pinMode(TRIG_PIN_1, OUTPUT);
    pinMode(ECHO_PIN_1, INPUT);
    pinMode(TRIG_PIN_2, OUTPUT);
    pinMode(ECHO_PIN_2, INPUT);

    // Attach the servo motor
    myservo.attach(SERVO_PIN);

    // Connect to WiFi
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    Serial.println("Connecting to WiFi...");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi!");
}

void loop() {
    // Measure distances
    float distance1 = measureDistance(TRIG_PIN_1, ECHO_PIN_1);
    float distance2 = measureDistance(TRIG_PIN_2, ECHO_PIN_2);

    // Update servo motor only if distance1 has changed
    if (distance1 != previousDistance1) {
        if (distance1 > 0 && distance1 < 25) {
            myservo.write(180);  // Open
            Serial.println("Motor Status: Open");
        } else {
            myservo.write(0);  // Closed
            Serial.println("Motor Status: Closed");
        }
        previousDistance1 = distance1;  // Update previous distance
    }

    // Check InSensor status and print only if it changes
    if (distance2 != previousDistance2) {
        if (distance2 <= 10) {
            Serial.println("InSensor: FULL");
        } else if (distance2 > 10 && distance2 <= 15) {
            Serial.println("InSensor: NEARLY FULL");
        } else if (distance2 > 15 && distance2 <= 18) {
            Serial.println("InSensor: A little bit");
        } else if (distance2 == 19) {
            Serial.println("InSensor: EMPTY");
        } else {
            Serial.println("InSensor: Unknown");
        }
        previousDistance2 = distance2;  // Update previous distance
    }

    // Send data every 5 seconds
    if (millis() - lastSendTime >= SEND_INTERVAL) {
        sendSensorData(distance1, distance2);
        lastSendTime = millis();  // Update the last send time
    }

    delay(50);  // Small delay to prevent rapid looping
}
